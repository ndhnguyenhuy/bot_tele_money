import os
import re
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials
import datetime
from dotenv import load_dotenv  # Th√™m d√≤ng n√†y
# Thay th·∫ø b·∫±ng Token Bot m·ªõi c·ªßa b·∫°n
load_dotenv()  # Th√™m d√≤ng n√†y ƒë·ªÉ t·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env

# L·∫•y Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")

# Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng
user_data = {}

# L·ªánh thi·∫øt l·∫≠p Sheet ID
async def set_sheet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sheet_id = ' '.join(context.args).strip()
    if not sheet_id:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p Sheet ID. V√≠ d·ª•: /sheet YOUR_SHEET_ID")
        return
    chat_id = update.effective_chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['sheet_id'] = sheet_id
    await update.message.reply_text(f"‚úÖ Sheet ID ƒë√£ ƒë∆∞·ª£c l∆∞u: {sheet_id}")

# L·ªánh thi·∫øt l·∫≠p Service Account File
async def set_service_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service_account_file = ' '.join(context.args).strip()
    if not service_account_file:
        await update.message.reply_text(
            "‚ùå Vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp service account JSON.\n"
            "V√≠ d·ª•: /setserviceaccount path/to/service_account.json\n"
            "N·∫øu b·∫°n ch∆∞a c√≥ Service Account, h√£y xem h∆∞·ªõng d·∫´n t·∫°i /instructions."
        )
        return
    chat_id = update.effective_chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['service_account_file'] = service_account_file
    await update.message.reply_text("‚úÖ ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp service account ƒë√£ ƒë∆∞·ª£c l∆∞u.")

# L·ªánh h∆∞·ªõng d·∫´n l·∫•y Service Account
async def instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructions_message = (
        "üìÑ **H∆∞·ªõng D·∫´n T·∫°o v√† Thi·∫øt L·∫≠p Service Account cho Google Sheets API** üìÑ\n\n"
        "ƒê·ªÉ bot c√≥ th·ªÉ ghi d·ªØ li·ªáu v√†o Google Sheets, b·∫°n c·∫ßn t·∫°o m·ªôt **Service Account** v√† chia s·∫ª Google Sheet v·ªõi Service Account ƒë√≥. Vui l√≤ng l√†m theo c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y:\n\n"
        "1. **T·∫°o Project tr√™n Google Cloud Console:**\n"
        "   - Truy c·∫≠p [Google Cloud Console](https://console.cloud.google.com/).\n"
        "   - T·∫°o m·ªôt Project m·ªõi ho·∫∑c s·ª≠ d·ª•ng Project hi·ªán c√≥.\n\n"
        "2. **B·∫≠t Google Sheets API:**\n"
        "   - V√†o **APIs & Services** > **Library**.\n"
        "   - T√¨m ki·∫øm **Google Sheets API** v√† nh·∫•n **Enable**.\n\n"
        "3. **T·∫°o Service Account v√† T·∫£i xu·ªëng Key:**\n"
        "   - Trong **APIs & Services** > **Credentials**, nh·∫•n **Create Credentials** > **Service account**.\n"
        "   - ƒêi·ªÅn th√¥ng tin c·∫ßn thi·∫øt v√† t·∫°o Service Account.\n"
        "   - Sau khi t·∫°o, v√†o **Manage keys** v√† nh·∫•n **Add Key** > **Create new key** > **JSON**. T·ªáp JSON s·∫Ω ƒë∆∞·ª£c t·∫£i xu·ªëng m√°y t√≠nh c·ªßa b·∫°n.\n\n"
        "4. **Chia S·∫ª Google Sheet v·ªõi Service Account:**\n"
        "   - M·ªü Google Sheet m√† b·∫°n mu·ªën ghi d·ªØ li·ªáu.\n"
        "   - Nh·∫•n v√†o n√∫t **Share**.\n"
        "   - Th√™m ƒë·ªãa ch·ªâ email c·ªßa Service Account (c√≥ trong t·ªáp JSON) v·ªõi quy·ªÅn **Editor**.\n\n"
        "5. **Thi·∫øt L·∫≠p Bot v·ªõi Service Account File:**\n"
        "   - S·ª≠ d·ª•ng l·ªánh `/setserviceaccount` trong bot v√† cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp JSON m√† b·∫°n ƒë√£ t·∫£i xu·ªëng.\n\n"
        "üìå **L∆∞u √ù:** ƒê·∫£m b·∫£o r·∫±ng t·ªáp `service_account.json` ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n v√† kh√¥ng ƒë∆∞·ª£c chia s·∫ª c√¥ng khai."
    )
    await update.message.reply_text(instructions_message, parse_mode='Markdown')

# L·ªánh /help ƒë·ªÉ li·ªát k√™ c√°c l·ªánh
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_message = (
        "üõ† **Danh S√°ch C√°c L·ªánh H·ªó Tr·ª£:**\n\n"
        "/sheet - Thi·∫øt l·∫≠p Sheet ID ƒë·ªÉ l∆∞u d·ªØ li·ªáu.\n"
        "/setserviceaccount - Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp Service Account JSON.\n"
        "/instructions - Xem h∆∞·ªõng d·∫´n t·∫°o v√† thi·∫øt l·∫≠p Service Account.\n"
        "/help - Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh h·ªó tr·ª£."
    )
    await update.message.reply_text(help_message, parse_mode='Markdown')

# H√†m ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ b√≥c t√°ch s·ªë ti·ªÅn v√† m·ª•c ƒë√≠ch
def parse_message(text):
    # T√¨m s·ªë ti·ªÅn (v√≠ d·ª•: 10k, 5000)
    match = re.search(r'(\d+(?:[kK])?)', text)
    if not match:
        return None, None

    # X·ª≠ l√Ω s·ªë ti·ªÅn
    amount_str = match.group(1)
    if 'k' in amount_str.lower():
        amount = int(amount_str.lower().replace('k', '')) * 1000
    else:
        amount = int(amount_str)

    # M·ª•c ƒë√≠ch: lo·∫°i b·ªè s·ªë ti·ªÅn kh·ªèi tin nh·∫Øn
    purpose = text.replace(match.group(0), '').strip()
    return amount, purpose

# H√†m l∆∞u d·ªØ li·ªáu v√†o Google Sheets s·ª≠ d·ª•ng Service Account
def save_to_google_sheet(sheet_id, service_account_file, amount, purpose, timestamp):
    try:
        # X√°c th·ª±c v·ªõi service account
        creds = Credentials.from_service_account_file(
            service_account_file,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        service = build('sheets', 'v4', credentials=creds)
        sheet = service.spreadsheets()

        # D·ªØ li·ªáu c·∫ßn th√™m, bao g·ªìm c·ªôt th·ªùi gian
        values = [[str(amount), purpose, timestamp]]
        body = {'values': values}

        # Ghi d·ªØ li·ªáu v√†o sheet (c·∫≠p nh·∫≠t t√™n sheet n·∫øu c·∫ßn)
        sheet.values().append(
            spreadsheetId=sheet_id,
            range="Sheet1!A:C",  # Thay "Sheet1" b·∫±ng t√™n sheet th·ª±c t·∫ø n·∫øu c·∫ßn
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body=body
        ).execute()
    except Exception as e:
        print(f"‚ùå Error khi l∆∞u v√†o Google Sheets: {e}")

# X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    amount, purpose = parse_message(text)

    if amount is None or not purpose:
        await update.message.reply_text(
            "‚ùå Kh√¥ng th·ªÉ nh·∫≠n di·ªán s·ªë ti·ªÅn v√† m·ª•c ƒë√≠ch.\n"
            "H√£y th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng nh∆∞ '10k ƒÉn s√°ng' ho·∫∑c 'ƒÉn s√°ng 10k'."
        )
        return

    # L·∫•y th·ªùi gian hi·ªán t·∫°i
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    await update.message.reply_text(f"S·ªë ti·ªÅn: {amount} VND\nM·ª•c ƒë√≠ch: {purpose}\nTh·ªùi gian: {current_time}")

    # Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng
    chat_id = update.effective_chat.id
    if chat_id not in user_data:
        await update.message.reply_text(
            "‚ö†Ô∏è B·∫°n c·∫ßn thi·∫øt l·∫≠p Sheet ID v√† Service Account tr∆∞·ªõc khi l∆∞u d·ªØ li·ªáu.\n"
            "S·ª≠ d·ª•ng l·ªánh /sheet v√† /setserviceaccount."
        )
        return
    if 'sheet_id' not in user_data[chat_id] or 'service_account_file' not in user_data[chat_id]:
        await update.message.reply_text(
            "‚ö†Ô∏è B·∫°n c·∫ßn thi·∫øt l·∫≠p Sheet ID v√† Service Account tr∆∞·ªõc khi l∆∞u d·ªØ li·ªáu.\n"
            "S·ª≠ d·ª•ng l·ªánh /sheet v√† /setserviceaccount."
        )
        return

    # L∆∞u v√†o Google Sheets
    sheet_id = user_data[chat_id]['sheet_id']
    service_account_file = user_data[chat_id]['service_account_file']
    save_to_google_sheet(sheet_id, service_account_file, amount, purpose, current_time)

    await update.message.reply_text("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Google Sheets.")

# H√†m ƒë·ªÉ thi·∫øt l·∫≠p c√°c l·ªánh cho bot
async def set_commands(application):
    commands = [
        BotCommand("sheet", "Thi·∫øt l·∫≠p Sheet ID ƒë·ªÉ l∆∞u d·ªØ li·ªáu."),
        BotCommand("setserviceaccount", "Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp Service Account JSON."),
        BotCommand("instructions", "Xem h∆∞·ªõng d·∫´n t·∫°o v√† thi·∫øt l·∫≠p Service Account."),
        BotCommand("help", "Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh h·ªó tr·ª£."),
    ]
    await application.bot.set_my_commands(commands)

# H√†m kh·ªüi t·∫°o v√† ch·∫°y bot
def main():
    # Kh·ªüi t·∫°o Application v·ªõi h√†m on_startup
    application = ApplicationBuilder().token(TOKEN).build()

    # ƒêƒÉng k√Ω c√°c l·ªánh
    application.add_handler(CommandHandler("sheet", set_sheet))
    application.add_handler(CommandHandler("setserviceaccount", set_service_account))
    application.add_handler(CommandHandler("instructions", instructions))
    application.add_handler(CommandHandler("help", help_command))  # Th√™m l·ªánh /help

    # ƒêƒÉng k√Ω x·ª≠ l√Ω tin nh·∫Øn
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # ƒêƒÉng k√Ω h√†m set_commands ƒë·ªÉ thi·∫øt l·∫≠p c√°c l·ªánh khi bot kh·ªüi ƒë·ªông
    async def on_startup(application):
        await set_commands(application)

    application.on_startup = on_startup

    # Ch·∫°y bot v·ªõi polling (blocking call)
    application.run_polling()

if __name__ == '__main__':
    main()
